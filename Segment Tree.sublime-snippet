<snippet>
	<content><![CDATA[
class SegmentTree {
public:
	int n;
	int lo[4*MAXN+1], hi[4*MAXN+1], minimum[4*MAXN+1], delta[4*MAXN+1];
	
	SegmentTree(int n) {
		this->n = n;
		init(1, 0, n-1);
	}
	
	void increment(int a, int b, int val) {
		increment(1, a, b, val);
	}
	
	int getMin(int a, int b) {
		return getMin(1, a, b);
	}
	
	void init(int i, int a, int b) {
		lo[i] = a;
		hi[i] = b;
		
		if (a == b) 
			return;
		
		int m = (a+b)/2;
		init(2*i, a, m);
		init(2*i+1, m+1, b);
	}
	
	void prop(int i) {
		delta[2*i] += delta[i];
		delta[2*i+1] += delta[i];
		delta[i] = 0;
	}
	
	void update(int i) {
		minimum[i] = min(minimum[2*i] + delta[2*i], minimum[2*i+1] + delta[2*i+1]);
	}
	
	void increment(int i, int a, int b, int val) {
		if (b < lo[i] || hi[i] < a) 
			return;
		
		if (a <= lo[i] && hi[i] <= b) {
			delta[i] += val;
			return;
		}
		
		prop(i);
		
		increment(2*i, a, b, val);
		increment(2*i+1, a, b, val);
		
		update(i);
	}
	
	int getMin(int i, int a, int b) {
		if (b < lo[i] || hi[i] < a) 
			return (1 << 29);
		
		if (a <= lo[i] && hi[i] <= b) {
			return minimum[i] + delta[i];
		}
		
		prop(i);
		
		int minLeft = getMin(2*i, a, b);
		int minRight = getMin(2*i+1, a, b);
		
		update(i);
		
		return min(minLeft, minRight);
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segmentTree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
	<description>Segment Tree</description>
</snippet>
