<snippet>
	<content><![CDATA[
class RollingHash {
public:
	ll hash, length, MOD, BASE;

	//Implementation: 1 * B ^ 3 + 1 * B ^ 2 + 1 * B ^ 1 + 1 * B ^ 0
	RollingHash(string s, ll MOD, ll BASE) {
		this->hash = 0;
		this->length = s.length();
		this->MOD = MOD;
		this->BASE = BASE;
		for (int i = 0; i < length; ++i) hash = (hash + (s[i] - 'a' + 1) * modExpo(BASE, length - i - 1) % MOD) % MOD;
	}

	void addFront(char c) {
		hash = (hash + (c - 'a' + 1) * modExpo(BASE, length) % MOD) % MOD;
		++length;
	}

	void addBack(char c) {
		hash = ((hash * BASE % MOD) + (c - 'a' + 1)) % MOD;
		++length;
	}

	//popFront methods needs to know the character at the front of the string
	void popFront(char c) {
		hash = (hash + MOD - (c - 'a' + 1) * modExpo(BASE, --length) % MOD) % MOD;
	}

	//popBack methods needs to know the character at the back of the string
	void popBack(char c) {
		hash = (hash + MOD - (c - 'a' + 1)) % MOD;
		hash = hash * modExpo(BASE, MOD - 2) % MOD;
		--length;
	}

	ll modExpo(int num, int e) {
		if (e == 0) return 1; if (e == 1) return num;
		ll ans = modExpo(num, e / 2);
		ans = ans * ans % MOD;
		if (e % 2 == 1) ans = ans * num % MOD;
		return ans;
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>rollingHash</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
	<description>Rabin Karp Rolling Hash</description>
</snippet>
